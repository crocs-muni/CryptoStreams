#!/usr/bin/python3

import os
import argparse


# used funs in batch
# USE exactly the string from estream_fun_names_id or worry about ID's of funs!
estream = [
    'Grain',
    'HC-128',
#   'MICKEY',
    'Rabbit',
    'Salsa20',
    'SOSEMANUK'
#   ,'Trivium'
]

sha = [
    'BLAKE',
    'Grostl',
    'JH',
    'Keccak',
    'MD6',
    'Skein',
]

class Fun_args:
    def __init__(self, block_size, key_size):
        self.block_size = block_size
        self.key_size = key_size

block = {
    'TEA': Fun_args(8, 16),
    'AES': Fun_args(16, 16),
    'RC4': Fun_args(16, 16),
    'SINGLE-DES': Fun_args(8, 8),
    'TRIPLE-DES': Fun_args(8, 24),
    'BLOWFISH':Fun_args(8,32)
}

FLAGS = None

def get_tv_size():
    if FLAGS.stream_type == "estream":
        return 16
    if FLAGS.stream_type == "sha3":
        return 32
    if FLAGS.stream_type == "block":
        return block[FLAGS.fun].block_size
    return 16

def generate():
    fun = FLAGS.fun
    r = FLAGS.rounds

    num = FLAGS.num
    tv_size = get_tv_size()

    if FLAGS.data:
        num = FLAGS.num // tv_size
    
    with open("generator.json", 'w') as f:

        f.write(r"""{
    "notes" : "generated by generator.py",
    "seed" : "1fe40505e131963c",

    "tv-size" : """ + str(get_tv_size()) + r""",
    "tv-count" : """ + str(num) + ',\n')

        if FLAGS.stream_type == "estream":
            f.write('"stream" : {\n')
            f.write('    "type" : "estream",\n')
            f.write('    "generator" : "pcg32",\n')
            f.write('    "init-frequency" : "only-once",\n')
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(r) + ',\n')
            f.write('    "block-size" : 16,\n')
            f.write("""\
                    "plaintext-type" : {
                        "type" : "counter"
                    },\n""")
            f.write('    "key-size" : 16,\n')
            f.write('    "key-type" : "random",\n')
            f.write('    "iv-type" : "zeros"\n')
            f.write('}')

        elif FLAGS.stream_type == "sha3":
            f.write('"stream" : {\n')
            f.write('    "type" : "sha3",\n')
            f.write('    "block-size" : 32,\n')
            f.write("""    "source" : {
        "type" : "counter"
    },\n""")
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(r) + ',\n')
            f.write('    "hash-bitsize" : 256\n')
            f.write('}\n')

        elif FLAGS.stream_type == "block":
            f.write('"stream" : {\n')
            f.write('    "type" : "block",\n')
            f.write('    "generator" : "pcg32",\n')
            f.write('    "init-frequency" : "only-once",\n')
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(r) + ',\n')
            f.write('    "block-size" : ' + str(block[fun].block_size) + ',\n')
            f.write("""    "plaintext" : {
        "type" : "counter"
    },\n""")
            f.write('    "key-size" : ' + str(block[fun].key_size) + ',\n')
            f.write("""    "key" : {
        "type" : "pcg32-stream"
    },\n""")
            f.write('    "mode" : "' + FLAGS.mode + '",\n')
            f.write("""    "iv" : {
        "type" : "false-stream"
    }\n""")
            f.write('}\n')

        else: # rnd
            f.write('"stream" : {\n')
            f.write('    "type" : "pcg32-stream",\n')
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(0) + ',\n')
            f.write('    "block-size" : 16\n')
            f.write('}\n')
        f.write('}\n')
        f.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-s',
        '--stream_type',
        type=str,
        default='',
        help='Stream: for AES, DES... = block, Salsa... = estream, Keccak... = SHA3'
    )
    parser.add_argument(
        '-f',
        '--fun',
        type=str,
        default='PRNG',
        help='Function used for data generation'
    )
    parser.add_argument(
        '-r',
        '--rounds',
        type=int,
        default=1,
        help='Function is reduced to --rounds'
    )
    parser.add_argument(
        '-m',
        '--mode',
        type=str,
        default='ECB',
        help='Mode for data generation, currently only ECB'
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '-n',
        '--num_tv',
        action='store_true',
        default=False,
        help='Number of test vectors generated'
    )
    group.add_argument(
        '-d',
        '--data',
        action='store_true',
        default=False,
        help='Number of generated bytes'
    )
    parser.add_argument(
        'num',
        metavar='N',
        type=int,
        default=1000000,
        help='the number of TV or data')
    FLAGS, unparsed = parser.parse_known_args()

    if FLAGS.num_tv == FLAGS.data:
        print('Choose EITHER --num_tv or --data')
        exit(1)

    if FLAGS.fun in estream:
        FLAGS.stream_type = 'estream'
    elif FLAGS.fun in sha:
        FLAGS.stream_type = 'SHA3'
    elif FLAGS.fun in block:
        FLAGS.stream_type = 'block'

    generate()
    os.system("./generator")
