//
// Created by mhajas on 7/21/18.
//

#ifndef CRYPTO_STREAMS_PRINCE_H
#define CRYPTO_STREAMS_PRINCE_H

#include <streams/block/ciphers/lightweight/lightweight.h>
#include <streams/block/ciphers/lightweight/common/cipher.h>

#define SBOX_BYTE RAM_DATA_BYTE
#define READ_SBOX_BYTE READ_RAM_DATA_BYTE

#define INVERSE_SBOX_BYTE RAM_DATA_BYTE
#define READ_INVERSE_SBOX_BYTE READ_RAM_DATA_BYTE

#define ROUND_CONSTANT_BYTE RAM_DATA_BYTE
#define READ_ROUND_CONSTANT_DOUBLE_WORD READ_RAM_DATA_DOUBLE_WORD

#define PRINCE_BLOCK_SIZE 8

#define PRINCE_KEY_SIZE 16
#define PRINCE_ROUND_KEYS_SIZE 24

#define PRINCE_NUMBER_OF_ROUNDS 12

namespace block {

    class prince : public lightweight<PRINCE_ROUND_KEYS_SIZE, PRINCE_BLOCK_SIZE> {
        /*
 *
 * Cipher constants
 *
 */
        SBOX_BYTE S0[16] = {0xB, 0xF, 0x3, 0x2, 0xA, 0xC, 0x9, 0x1, 0x6, 0x7, 0x8, 0x0, 0xE, 0x5, 0xD, 0x4};

        INVERSE_SBOX_BYTE S1[16] = {0xB, 0x7, 0x3, 0x2, 0xF, 0xD, 0x8, 0x9, 0xA, 0x6, 0x4, 0x0, 0x5, 0xE, 0xC, 0x1};

        ROUND_CONSTANT_BYTE RC[96] =
                {
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x44, 0x73, 0x70, 0x03, 0x2e, 0x8a, 0x19, 0x13,
                        0xd0, 0x31, 0x9f, 0x29, 0x22, 0x38, 0x09, 0xa4,
                        0x89, 0x6c, 0x4e, 0xec, 0x98, 0xfa, 0x2e, 0x08,
                        0x77, 0x13, 0xd0, 0x38, 0xe6, 0x21, 0x28, 0x45,
                        0x6c, 0x0c, 0xe9, 0x34, 0xcf, 0x66, 0x54, 0xbe,
                        0xb1, 0x5c, 0x95, 0xfd, 0x78, 0x4f, 0xf8, 0x7e,
                        0xaa, 0x43, 0xac, 0xf1, 0x51, 0x08, 0x84, 0x85,
                        0x54, 0x3c, 0x32, 0x25, 0x2f, 0xd3, 0x82, 0xc8,
                        0x0d, 0x61, 0xe3, 0xe0, 0x95, 0x11, 0xa5, 0x64,
                        0x99, 0x23, 0x0c, 0xca, 0x99, 0xa3, 0xb5, 0xd3,
                        0xdd, 0x50, 0x7c, 0xc9, 0xb7, 0x29, 0xac, 0xc0
                };
    public:
        prince(size_t rounds) : lightweight(rounds) {}

        void keysetup(const std::uint8_t *key, const std::uint64_t keysize) override;

        void Encrypt(uint8_t *block) override;

        void Decrypt(uint8_t *block) override;

    };

}


#endif //CRYPTO_STREAMS_PRINCE_H
