//
// Created by mhajas on 7/21/18.
//

#ifndef CRYPTO_STREAMS_LED_H
#define CRYPTO_STREAMS_LED_H

#include <streams/block/ciphers/lightweight/lightweight.h>
#include <cstring>
#include <streams/block/ciphers/lightweight/common/cipher.h>

#define INVERSE_SBOX_BYTE RAM_DATA_BYTE
#define READ_INVERSE_SBOX_BYTE READ_RAM_DATA_BYTE

#define ROUND_TABLE_WORD RAM_DATA_WORD
#define READ_ROUND_TABLE_WORD READ_RAM_DATA_WORD

#define INVERSE_ROUND_TABLE_WORD RAM_DATA_WORD
#define READ_INVERSE_ROUND_TABLE_WORD READ_RAM_DATA_WORD

#define ROUND_CONSTANT_BYTE RAM_DATA_BYTE
#define READ_ROUND_CONSTANT_BYTE READ_RAM_DATA_BYTE

#define LED_BLOCK_SIZE 8

#define LED_KEY_SIZE 10
#define LED_ROUND_KEYS_SIZE 20

#define LED_NUMBER_OF_ROUNDS 48

namespace block {

    class led : public lightweight<LED_ROUND_KEYS_SIZE, LED_BLOCK_SIZE> {
        void SCShRMCS(uint8_t state[4][4]);

        void invSCShRMCS(uint8_t state[4][4]);

        void AddKey(uint8_t state[4][4], uint8_t* keyBytes, uint8_t half);

        void AddConstants(uint8_t state[4][4], uint8_t r);

        ROUND_CONSTANT_BYTE RC[48] = {
                0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3D, 0x3B, 0x37, 0x2F,
                0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B,
                0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E,
                0x1C, 0x38, 0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A,
                0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04
        };

        INVERSE_SBOX_BYTE invSbox[16] = {5, 14, 15, 8, 12, 1, 2, 13, 11, 4, 6, 3, 0, 7, 9, 10};

        ROUND_TABLE_WORD RndTab[4][16] = {
                { 0x5ADB, 0x7E1A, 0xB5FC, 0xA795, 0x24C1, 0x0000, 0xEF27, 0x1269, \
                0xCBE6, 0xD98F, 0x913D, 0x6C73, 0x36A8, 0xFD4E, 0x48B2, 0x8354 },
                { 0xCE4B, 0x5D3A, 0x672C, 0xBF85, 0x9371, 0x0000, 0xA967, 0xD8A9, \
                0x3A16, 0xE2BF, 0xF45D, 0x8593, 0x4BD8, 0x71CE, 0x16E2, 0x2CF4 },
                { 0xB918, 0xA246, 0xCD94, 0x5123, 0x1B5E, 0x0000, 0x748C, 0x9CB7, \
                0x6FD2, 0xF365, 0xD6CA, 0x3EF1, 0x87E9, 0xE83B, 0x25AF, 0x4A7D },
                { 0xBE6D, 0xADB1, 0xC73F, 0x5FC9, 0x13DC, 0x0000, 0x7952, 0x98F6, \
                0x6A8E, 0xF278, 0xD4E3, 0x3547, 0x8B2A, 0xE1A4, 0x269B, 0x4C15 }
        };

        INVERSE_ROUND_TABLE_WORD invRndTab[4][16] = {
                { 0x0000, 0xC37D, 0xB6E9, 0x7594, 0x5CF1, 0x9F8C, 0xEA18, 0x2965, \
                0xABD2, 0x68AF, 0x1D3B, 0xDE46, 0xF723, 0x345E, 0x41CA, 0x82B7 },
                { 0x0000, 0xC869, 0xB3C1, 0x7BA8, 0x56B2, 0x9EDB, 0xE573, 0x2D1A, \
                0xAC54, 0x643D, 0x1F95, 0xD7FC, 0xFAE6, 0x328F, 0x4927, 0x814E },
                { 0x0000, 0xD429, 0x9841, 0x4C68, 0x1382, 0xC7AB, 0x8BC3, 0x5FEA, \
                0x2634, 0xF21D, 0xBE75, 0x6A5C, 0x35B6, 0xE19F, 0xADF7, 0x79DE },
                { 0x0000, 0x45ED, 0x8AF9, 0xCF14, 0x37D1, 0x723C, 0xBD28, 0xF8C5, \
                0x6E92, 0x2B7F, 0xE46B, 0xA186, 0x5943, 0x1CAE, 0xD3BA, 0x9657 }
        };

    public:
        led(size_t rounds) : lightweight(rounds) {}

        void keysetup(const std::uint8_t *key, const std::uint64_t keysize) override;

        void Encrypt(uint8_t *block) override;

        void Decrypt(uint8_t *block) override;
    };
}


#endif //CRYPTO_STREAMS_LED_H
